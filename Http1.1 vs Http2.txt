HTTP:

HTTp Means hyper text transfer protocol and By using HTTP user sends the request to the server & the server sends the response to the user.
Then several stages of development of HTTP was developed into HTTP1.1 and HTTP2.


  HTTP1.1:                                                                        

 1.HTTP is a top-level application protocol that exchanges information between a client computer 
 and a local or remote web server.  
 2.In this process, a client sends a text-based request to a server by calling a method like GET or POST. 
 In response, the server sends a resource like an HTML page back to the client. 

 For example:
  1.you are visiting a website at the domain www.example.com.When you navigate to this URL, the web browser on your computer sends an HTTP request in the form of a text-based message   
  This request uses the GET method, which asks for data from the host server.web server returns an HTML page to the requesting client,in addition to any images, stylesheets, or other resources called 
   for in the HTML 
   
   HTTP/1.1 — Pipelining and Head-of-Line Blocking:  

   1.HTTP/1.1 takes care of this problem by introducing persistent connections and pipelining. 
   With persistent connections, HTTP/1.1 assumes that a TCP connection should be kept open unless directly told to close. 
   2.This allows the client to send multiple requests along the same connection without waiting for a response to each, greatly improving the performance of HTTP/1.1 over HTTp 1.0.                   
   3.the head of the queue that cannot retrieve its required resource will block all the requests behind it. This is known as head-of-line (HOL) blocking.
   
   HTTP/1.1 — Resource Inlining:

   1.the developer knows in advance which additional resources the client machine will need to render the page, they can use a technique called resource inlining to include the required resource directly within the HTML document that the server sends in response to the initial GET request. 
   For example, if a client needs a specific CSS file to render a page, inlining that CSS file will provide the client with the needed resource before it asks for it, reducing the total number of requests that the client must send.

   HTTP/1.1-Compression:

   1.Programs like gzip have long been used to compress the data sent in HTTP messages, especially to decrease the size of CSS and JavaScript files. The header component of a message, however, is always sent as plain text.
   2.Additionally, the use of cookies can sometimes make headers much larger, increasing the need for some kind of compression.

   HTTP/1.1-Buffer Overflow:

  1. When this connection initiates, both client and server establish their buffer sizes using their system default settings.
  2. If the receiver’s buffer is partially filled with data, it will tell the sender its receive window, i.e., the amount of available space that remains in its buffer. This receive window is advertised in a signal known as an ACK packet.

  HTTP2:
  
  1.HTTP/2 began as the SPDY protocol, developed primarily at Google with the intention of reducing web page load latency by using techniques such as compression, multiplexing, and prioritization.
  2.This protocol served as a template for HTTP/2 when the Hypertext Transfer Protocol working group httpbis of the IETF (Internet Engineering Task Force).
  3.HTTP/2 is the binary framing layer, which can be thought of as a part of the application layer in the internet protocol stack.
  4.As opposed to HTTP/1.1, which keeps all requests and responses in plain text format, HTTP/2 uses the binary framing layer to encapsulate all messages in binary format maintaining HTTP semantics, such as verbs, methods, and headers.
  5.An application level API would still create messages in the conventional HTTP formats, but the underlying layer would then convert these messages into binary. This ensures that web applications created before HTTP/2 can continue functioning as normal when interacting with the new protocol.

  HTTP/2 — Advantages of the Binary Framing Layer:

  1. HTTP/2, the binary framing layer encodes requests/responses and cuts them up into smaller packets of information, greatly increasing the flexibility of data transfer.
  2.HTTP/1.1, which must make use of multiple TCP connections to lessen the effect of HOL blocking, HTTP/2 establishes a single connection object between the two machines. 

  HTTP/2 — Stream Prioritization:

  1.Stream prioritization not only solves the possible issue of requests competing for the same resource, but also allows developers to customize the relative weight of requests to better optimize application performance.
  2.the process of this prioritization in order to provide better insight into how you can leverage this feature of HTTP/2.server uses this information to create a dependency tree, which allows the server to determine the order in which the requests will retrieve their data.

  HTTP/2-Buffer Overflow:

1.HTTP/2 multiplexes streams of data within a single TCP connection level of the TCP connection are not sufficient to regulate the delivery of individual streams.
2.HTTP/2 solves this problem by allowing the client and server to implement their own flow controls, rather than relying on the transport layer. The application layer communicates the available buffer space, allowing the client and server to set the receive window on the level of the multiplexed streams. 

HTTP/2 — Server Push:
1.HTTP/2 enables multiple concurrent responses to a client’s initial GET request, a server can send a resource to a client along with the requested HTML page, providing the resource before the client asks for it. This process is called server push.
2.this process begins when the server sends a PUSH_PROMISE frame to inform the client that it is going to push a resource.

HTTP/2-Compression:
1.HTTP/2 is its ability to use the binary framing layer to exhibit greater control over finer detail. The same is true when it comes to header compression.
2.HTTP/2 can split headers from their data, resulting in a header frame and a data frame. The HTTP/2-specific compression program HPACK can then compress this header frame.



